name: code_check

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  code_check:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source $VENV
          # check that all src directories contain a __init__.py
          missing_init=$(find src/clev2er -type d \( -name '.*' -o -name '__*' \) -prune -o -type d ! -exec test -e '{}/__init__.py' \; -print | head -n 1)
          if [ -n "$missing_init" ]; then
            echo "Missing __init__.py in directory : $missing_init"
            exit 1
          fi
          ruff src/clev2er
          pylint --version
          pylint src/clev2er
          mypy --ignore-missing-imports src/clev2er
          
